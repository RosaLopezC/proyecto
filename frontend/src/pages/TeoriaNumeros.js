import React, { useState } from 'react';
import '../styles/Teoria.css';

function TeoriaNumeros() {
    const [videoVisto, setVideoVisto] = useState(false);
    const [juegoIniciado, setJuegoIniciado] = useState(false);
    const [juegoActual, setJuegoActual] = useState(0);
    const [vidas, setVidas] = useState(3);
    const [puntaje, setPuntaje] = useState(0);
    const [numeroActual, setNumeroActual] = useState(null);
    const [respuestaCorrecta, setRespuestaCorrecta] = useState(null);

    const numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

    const juegos = [
        {
            nombre: 'Encuentra los n√∫meros pares e impares',
            instrucciones: 'Selecciona si el n√∫mero es par o impar.',
            teoria: (
                <div className="teoria-box par-impar">
                    <h4>Teor√≠a: N√∫meros Pares e Impares</h4>
                    <p>Los n√∫meros pares son aquellos que se pueden dividir exactamente entre 2, como 2, 4, 6, 8, 10. Los n√∫meros impares no se pueden dividir exactamente entre 2, como 1, 3, 5, 7, 9.</p>
                    <img src="https://via.placeholder.com/150x150/8a2be2/ffffff?text=Pares+e+Impares" alt="Pares e Impares" />
                </div>
            ),
            generarNumero: () => {
                const numero = numeros[Math.floor(Math.random() * numeros.length)];
                setNumeroActual(numero);
                setRespuestaCorrecta(numero % 2 === 0 ? 'par' : 'impar');
            },
            verificarRespuesta: (respuesta) => {
                if (respuesta === respuestaCorrecta) {
                    setPuntaje((prev) => prev + 1);
                } else {
                    setVidas((prev) => prev - 1);
                }
                juegos[juegoActual].generarNumero();
            }
        },
        {
            nombre: 'Encuentra el n√∫mero mayor',
            instrucciones: 'Selecciona el n√∫mero mayor entre los dos.',
            teoria: (
                <div className="teoria-box mayor">
                    <h4>Teor√≠a: N√∫meros Mayores</h4>
                    <p>Para encontrar el n√∫mero mayor entre dos n√∫meros, simplemente comp√°ralos. El n√∫mero m√°s grande es el mayor.</p>
                    <img src="https://via.placeholder.com/150x150/ff6347/ffffff?text=Mayor" alt="Mayor" />
                </div>
            ),
            generarNumero: () => {
                const num1 = numeros[Math.floor(Math.random() * numeros.length)];
                const num2 = numeros[Math.floor(Math.random() * numeros.length)];
                setNumeroActual([num1, num2]);
                setRespuestaCorrecta(num1 > num2 ? num1 : num2);
            },
            verificarRespuesta: (respuesta) => {
                if (respuesta === respuestaCorrecta) {
                    setPuntaje((prev) => prev + 1);
                } else {
                    setVidas((prev) => prev - 1);
                }
                juegos[juegoActual].generarNumero();
            }
        },
        {
            nombre: 'Encuentra el n√∫mero menor',
            instrucciones: 'Selecciona el n√∫mero menor entre los dos.',
            teoria: (
                <div className="teoria-box menor">
                    <h4>Teor√≠a: N√∫meros Menores</h4>
                    <p>Para encontrar el n√∫mero menor entre dos n√∫meros, simplemente comp√°ralos. El n√∫mero m√°s peque√±o es el menor.</p>
                    <img src="https://via.placeholder.com/150x150/4b0082/ffffff?text=Menor" alt="Menor" />
                </div>
            ),
            generarNumero: () => {
                const num1 = numeros[Math.floor(Math.random() * numeros.length)];
                const num2 = numeros[Math.floor(Math.random() * numeros.length)];
                setNumeroActual([num1, num2]);
                setRespuestaCorrecta(num1 < num2 ? num1 : num2);
            },
            verificarRespuesta: (respuesta) => {
                if (respuesta === respuestaCorrecta) {
                    setPuntaje((prev) => prev + 1);
                } else {
                    setVidas((prev) => prev - 1);
                }
                juegos[juegoActual].generarNumero();
            }
        }
    ];

    const iniciarJuego = () => {
        setJuegoIniciado(true);
        setVidas(3);
        setPuntaje(0);
        juegos[juegoActual].generarNumero();
    };

    const siguienteJuego = () => {
        setJuegoActual((prev) => prev + 1);
        setVidas(3);
        setPuntaje(0);
        juegos[juegoActual].generarNumero();
    };

    const reiniciarJuego = () => {
        setVidas(3);
        setPuntaje(0);
        juegos[juegoActual].generarNumero();
    };

    return (
        <div className="teoria-container">
            <h2>¬°Aprendamos a Contar! üéâ</h2>
            <p className="intro-text">
                Los <span className="highlight">n√∫meros</span> nos ayudan a contar objetos. Contemos juntos algunos objetos y aprendamos los n√∫meros.
            </p>

            {!videoVisto && (
                <div className="teoria-content">
                    {juegos.map((juego, index) => (
                        <div key={index} className="teoria-item">
                            {juego.teoria}
                        </div>
                    ))}
                    <div className="video-container">
                        <h3>¬°Mira este video para aprender m√°s! üì∫</h3>
                        <iframe
                            width="560"
                            height="315"
                            src="https://www.youtube.com/embed/M4ew1mz2UV8"
                            title="YouTube video player"
                            frameBorder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                            allowFullScreen
                        ></iframe>
                        <div className="practicar-button-container">
                            <button className="practicar-button" onClick={() => setVideoVisto(true)}>
                                A Practicar üéÆ
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {videoVisto && !juegoIniciado && (
                <button className="jugar-button" onClick={iniciarJuego}>
                    Jugar üéÆ
                </button>
            )}

            {juegoIniciado && (
                <div className="juego-container">
                    <h3>{juegos[juegoActual].nombre} üéÆ</h3>
                    <p>{juegos[juegoActual].instrucciones}</p>
                    <p>Vidas restantes: {vidas} ‚ù§Ô∏è</p>
                    <p>Puntaje: {puntaje} üåü</p>
                    <div className="numero-box">
                        {numeroActual}
                    </div>
                    <div className="opciones">
                        {Array.isArray(numeroActual) ? (
                            numeroActual.map((num) => (
                                <button
                                    key={num}
                                    className="opcion-button"
                                    onClick={() => juegos[juegoActual].verificarRespuesta(num)}
                                >
                                    {num}
                                </button>
                            ))
                        ) : (
                            <>
                                <button className="opcion-button" onClick={() => juegos[juegoActual].verificarRespuesta('par')}>
                                    Par üü¢
                                </button>
                                <button className="opcion-button" onClick={() => juegos[juegoActual].verificarRespuesta('impar')}>
                                    Impar üî¥
                                </button>
                            </>
                        )}
                    </div>
                    {vidas === 0 && (
                        <div>
                            <p className="resultado incorrecto">¬°Perdiste! üòÖ</p>
                            <button className="reiniciar-button" onClick={reiniciarJuego}>
                                Reiniciar üîÑ
                            </button>
                        </div>
                    )}
                    {puntaje === 5 && (
                        <div>
                            <p className="resultado correcto">¬°Felicidades! Has completado el juego. üéâ</p>
                            {juegoActual < juegos.length - 1 ? (
                                <button className="siguiente-juego-button" onClick={siguienteJuego}>
                                    Siguiente Juego ‚û°Ô∏è
                                </button>
                            ) : (
                                <p className="felicitaciones">¬°Has completado todos los juegos! üéâ</p>
                            )}
                        </div>
                    )}
                    <div className="progress-bar">
                        <div className="progress" style={{ width: `${(puntaje / 5) * 100}%` }}></div>
                    </div>
                </div>
            )}
        </div>
    );
}

export default TeoriaNumeros;